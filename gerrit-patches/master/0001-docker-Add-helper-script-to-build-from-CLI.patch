From 67cfda84c79798077c600b9a7882e2c19a624ee3 Mon Sep 17 00:00:00 2001
From: Philippe Coval <philippe.coval@osg.samsung.com>
Date: Tue, 9 Jan 2018 18:19:18 +0100
Subject: [PATCH] docker: Add helper script to build from CLI

Until merged it can be tested on:

    curl -SL https://rawgit.com/rzr/iotivity/master/run.sh | bash -

Bug: https://jira.iotivity.org/browse/IOT-524
Change-Id: I9938929244e76403c75612327b7af3d546aa057f
Origin: https://gerrit.iotivity.org/gerrit/#/c/23921/
Signed-off-by: Philippe Coval <philippe.coval@osg.samsung.com>
---
 run.sh | 162 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 162 insertions(+)
 create mode 100755 run.sh

diff --git a/run.sh b/run.sh
new file mode 100755
index 000000000..403cfbb8a
--- /dev/null
+++ b/run.sh
@@ -0,0 +1,162 @@
+#!/bin/bash
+# -*- coding: utf-8 -*-
+#{
+# Copyright 2018 Samsung Electronics France SAS
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#}
+
+set -e
+set -x
+
+env_()
+{
+    project="iotivity"
+    org="${project}"
+    branch="master"
+    url_suffix="#{branch}"
+
+    #{ TODO: Update this section if forking
+    # user="${USER}"
+    # org="${user}"
+    # branch="sandbox/${user}/${branch}"
+    # url_suffix="#{branch}"
+    # url_suffix="" # TODO: For older docker
+    #}
+
+    url="https://github.com/${org}/${project}.git${url_suffix}"
+    run_url="https://raw.githubusercontent.com/${org}/${project}/${branch}/run.sh"
+
+    release="0.0.0"
+    src=false
+    if [ -d '.git' ] && which git ; then
+        src=true
+        branch=$(git rev-parse --abbrev-ref HEAD) ||:
+        release=$(git describe --tags || echo "$release")
+    fi
+
+    SELF="$0"
+    [ "$SELF" != "$SHELL" ] || SELF="${PWD}/run.sh"
+    [ "$SELF" != "/bin/bash" ] || SELF="${DASH_SOURCE}"
+    [ "$SELF" != "/bin/bash" ] || SELF="${BASH_SOURCE}"
+    self_basename=$(basename -- "${SELF}")
+}
+
+
+usage_()
+{
+    cat<<EOF
+Usage:
+$0
+or
+curl -sL "${run_url}" | bash -
+
+EOF
+}
+
+
+die_()
+{
+    errno=$?
+    echo "error: [$errno] $@"
+    exit $errno
+}
+
+
+setup_debian_()
+{
+    which docker || sudo apt-get install docker.io
+    which git || sudo apt-get install git
+
+    sudo apt-get install qemu qemu-user-static binfmt-support
+    sudo update-binfmts --enable qemu-arm
+}
+
+
+setup_()
+{
+    docker version && return $? ||:
+
+    if [ -r /etc/debian_version ] ; then
+        setup_debian_
+    else
+        cat<<EOF
+warning: OS not supported
+Please ask for support at:
+${url}
+EOF
+        cat /etc/os-release ||:
+    fi
+
+    docker version && return $? ||:
+    docker --version || die_ "please install docker"
+    groups | grep docker \
+        || sudo addgroup ${USER} docker \
+        || die_ "${USER} must be in docker group"
+    su -l $USER -c "docker version" \
+        && { su -l $USER -c "$SHELL $SELF $@" ; exit $?; } \
+        || die_ "unexpected error"
+}
+
+
+prep_()
+{
+    echo "Prepare: "
+    cat /etc/os-release
+    docker version || setup_
+}
+
+
+build_()
+{
+    version="latest"
+    outdir="${PWD}/tmp/out"
+    container="${project}"
+    branch_name=$(echo "${branch}" | sed -e 's|/|.|g')
+    dir="/usr/local/src/${project}/"
+    image="${user}/${project}/${branch}"
+    tag="$image:${version}"
+    tag="${project}:${branch_name}"
+    tag="${project}:${branch_name}.${release}"
+    container="${project}"
+    if $src && [ "run.sh" = "${self_basename}" ] ; then
+        docker build -t "$tag" .
+    else
+        docker build -t "$tag" "${url}"
+    fi
+    docker rm "${container}" > /dev/null 2>&1 ||:
+    docker create --name "${container}" "${tag}" /bin/true
+    rm -rf "${outdir}"
+    mkdir -p "${outdir}"
+    docker cp "${container}:${dir}" "${outdir}"
+    echo "Check Ouput files in:"
+    ls "${outdir}/"*
+}
+
+
+test_()
+{
+    curl -sL "${run_url}" | bash -
+}
+
+
+main_()
+{
+    env_ "$@"
+    usage_ "$@"
+    prep_ "$@"
+    build_ "$@"
+}
+
+
+main_ "$@"
-- 
2.16.1.windows.1

